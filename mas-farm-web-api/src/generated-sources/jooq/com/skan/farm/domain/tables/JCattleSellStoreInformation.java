/*
 * This file is generated by jOOQ.
 */
package com.skan.farm.domain.tables;


import com.skan.farm.domain.JNaiveItFarm;
import com.skan.farm.domain.Keys;
import com.skan.farm.domain.tables.records.JCattleSellStoreInformationRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCattleSellStoreInformation extends TableImpl<JCattleSellStoreInformationRecord> {

    private static final long serialVersionUID = 1402766679;

    /**
     * The reference instance of <code>naive-it-farm.cattle_sell_store_information</code>
     */
    public static final JCattleSellStoreInformation CATTLE_SELL_STORE_INFORMATION = new JCattleSellStoreInformation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JCattleSellStoreInformationRecord> getRecordType() {
        return JCattleSellStoreInformationRecord.class;
    }

    /**
     * The column <code>naive-it-farm.cattle_sell_store_information.entity_identification_number</code>.
     */
    public final TableField<JCattleSellStoreInformationRecord, String> ENTITY_IDENTIFICATION_NUMBER = createField(DSL.name("entity_identification_number"), org.jooq.impl.SQLDataType.VARCHAR(12).nullable(false), this, "");

    /**
     * The column <code>naive-it-farm.cattle_sell_store_information.entity_management_number</code>.
     */
    public final TableField<JCattleSellStoreInformationRecord, String> ENTITY_MANAGEMENT_NUMBER = createField(DSL.name("entity_management_number"), org.jooq.impl.SQLDataType.VARCHAR(8).nullable(false), this, "");

    /**
     * The column <code>naive-it-farm.cattle_sell_store_information.beef_grade</code>.
     */
    public final TableField<JCattleSellStoreInformationRecord, String> BEEF_GRADE = createField(DSL.name("beef_grade"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>naive-it-farm.cattle_sell_store_information.created_time</code>.
     */
    public final TableField<JCattleSellStoreInformationRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>naive-it-farm.cattle_sell_store_information.dressed_weight</code>.
     */
    public final TableField<JCattleSellStoreInformationRecord, Short> DRESSED_WEIGHT = createField(DSL.name("dressed_weight"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>naive-it-farm.cattle_sell_store_information.liveweight</code>.
     */
    public final TableField<JCattleSellStoreInformationRecord, Short> LIVEWEIGHT = createField(DSL.name("liveweight"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>naive-it-farm.cattle_sell_store_information.modified_time</code>.
     */
    public final TableField<JCattleSellStoreInformationRecord, LocalDateTime> MODIFIED_TIME = createField(DSL.name("modified_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>naive-it-farm.cattle_sell_store_information.number_of_month</code>.
     */
    public final TableField<JCattleSellStoreInformationRecord, String> NUMBER_OF_MONTH = createField(DSL.name("number_of_month"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>naive-it-farm.cattle_sell_store_information.sell_date</code>.
     */
    public final TableField<JCattleSellStoreInformationRecord, LocalDate> SELL_DATE = createField(DSL.name("sell_date"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>naive-it-farm.cattle_sell_store_information.sell_note</code>.
     */
    public final TableField<JCattleSellStoreInformationRecord, String> SELL_NOTE = createField(DSL.name("sell_note"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>naive-it-farm.cattle_sell_store_information.sell_phone_number</code>.
     */
    public final TableField<JCattleSellStoreInformationRecord, String> SELL_PHONE_NUMBER = createField(DSL.name("sell_phone_number"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>naive-it-farm.cattle_sell_store_information.selling_price</code>.
     */
    public final TableField<JCattleSellStoreInformationRecord, Integer> SELLING_PRICE = createField(DSL.name("selling_price"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>naive-it-farm.cattle_sell_store_information.store_name</code>.
     */
    public final TableField<JCattleSellStoreInformationRecord, String> STORE_NAME = createField(DSL.name("store_name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>naive-it-farm.cattle_sell_store_information.age_of_month</code>.
     */
    public final TableField<JCattleSellStoreInformationRecord, String> AGE_OF_MONTH = createField(DSL.name("age_of_month"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>naive-it-farm.cattle_sell_store_information</code> table reference
     */
    public JCattleSellStoreInformation() {
        this(DSL.name("cattle_sell_store_information"), null);
    }

    /**
     * Create an aliased <code>naive-it-farm.cattle_sell_store_information</code> table reference
     */
    public JCattleSellStoreInformation(String alias) {
        this(DSL.name(alias), CATTLE_SELL_STORE_INFORMATION);
    }

    /**
     * Create an aliased <code>naive-it-farm.cattle_sell_store_information</code> table reference
     */
    public JCattleSellStoreInformation(Name alias) {
        this(alias, CATTLE_SELL_STORE_INFORMATION);
    }

    private JCattleSellStoreInformation(Name alias, Table<JCattleSellStoreInformationRecord> aliased) {
        this(alias, aliased, null);
    }

    private JCattleSellStoreInformation(Name alias, Table<JCattleSellStoreInformationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JCattleSellStoreInformation(Table<O> child, ForeignKey<O, JCattleSellStoreInformationRecord> key) {
        super(child, key, CATTLE_SELL_STORE_INFORMATION);
    }

    @Override
    public Schema getSchema() {
        return JNaiveItFarm.NAIVE_IT_FARM;
    }

    @Override
    public UniqueKey<JCattleSellStoreInformationRecord> getPrimaryKey() {
        return Keys.KEY_CATTLE_SELL_STORE_INFORMATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<JCattleSellStoreInformationRecord>> getKeys() {
        return Arrays.<UniqueKey<JCattleSellStoreInformationRecord>>asList(Keys.KEY_CATTLE_SELL_STORE_INFORMATION_PRIMARY);
    }

    @Override
    public List<ForeignKey<JCattleSellStoreInformationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JCattleSellStoreInformationRecord, ?>>asList(Keys.FK7LCCG28LA9RJ67746F63RJHTF);
    }

    public JLocalBeefManagement localBeefManagement() {
        return new JLocalBeefManagement(this, Keys.FK7LCCG28LA9RJ67746F63RJHTF);
    }

    @Override
    public JCattleSellStoreInformation as(String alias) {
        return new JCattleSellStoreInformation(DSL.name(alias), this);
    }

    @Override
    public JCattleSellStoreInformation as(Name alias) {
        return new JCattleSellStoreInformation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCattleSellStoreInformation rename(String name) {
        return new JCattleSellStoreInformation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCattleSellStoreInformation rename(Name name) {
        return new JCattleSellStoreInformation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<String, String, String, LocalDateTime, Short, Short, LocalDateTime, String, LocalDate, String, String, Integer, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}

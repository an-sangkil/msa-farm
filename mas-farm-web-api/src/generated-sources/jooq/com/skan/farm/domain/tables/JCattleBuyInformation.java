/*
 * This file is generated by jOOQ.
 */
package com.skan.farm.domain.tables;


import com.skan.farm.domain.JNaiveItFarm;
import com.skan.farm.domain.Keys;
import com.skan.farm.domain.tables.records.JCattleBuyInformationRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCattleBuyInformation extends TableImpl<JCattleBuyInformationRecord> {

    private static final long serialVersionUID = 1544439342;

    /**
     * The reference instance of <code>naive-it-farm.cattle_buy_information</code>
     */
    public static final JCattleBuyInformation CATTLE_BUY_INFORMATION = new JCattleBuyInformation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JCattleBuyInformationRecord> getRecordType() {
        return JCattleBuyInformationRecord.class;
    }

    /**
     * The column <code>naive-it-farm.cattle_buy_information.entity_identification_number</code>.
     */
    public final TableField<JCattleBuyInformationRecord, String> ENTITY_IDENTIFICATION_NUMBER = createField(DSL.name("entity_identification_number"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>naive-it-farm.cattle_buy_information.entity_management_number</code>.
     */
    public final TableField<JCattleBuyInformationRecord, String> ENTITY_MANAGEMENT_NUMBER = createField(DSL.name("entity_management_number"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>naive-it-farm.cattle_buy_information.buy_date</code>.
     */
    public final TableField<JCattleBuyInformationRecord, LocalDate> BUY_DATE = createField(DSL.name("buy_date"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>naive-it-farm.cattle_buy_information.buy_note</code>.
     */
    public final TableField<JCattleBuyInformationRecord, String> BUY_NOTE = createField(DSL.name("buy_note"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>naive-it-farm.cattle_buy_information.buy_phone_number</code>.
     */
    public final TableField<JCattleBuyInformationRecord, String> BUY_PHONE_NUMBER = createField(DSL.name("buy_phone_number"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>naive-it-farm.cattle_buy_information.buy_sell_phone_number</code>.
     */
    public final TableField<JCattleBuyInformationRecord, String> BUY_SELL_PHONE_NUMBER = createField(DSL.name("buy_sell_phone_number"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>naive-it-farm.cattle_buy_information.buy_store_name</code>.
     */
    public final TableField<JCattleBuyInformationRecord, String> BUY_STORE_NAME = createField(DSL.name("buy_store_name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>naive-it-farm.cattle_buy_information</code> table reference
     */
    public JCattleBuyInformation() {
        this(DSL.name("cattle_buy_information"), null);
    }

    /**
     * Create an aliased <code>naive-it-farm.cattle_buy_information</code> table reference
     */
    public JCattleBuyInformation(String alias) {
        this(DSL.name(alias), CATTLE_BUY_INFORMATION);
    }

    /**
     * Create an aliased <code>naive-it-farm.cattle_buy_information</code> table reference
     */
    public JCattleBuyInformation(Name alias) {
        this(alias, CATTLE_BUY_INFORMATION);
    }

    private JCattleBuyInformation(Name alias, Table<JCattleBuyInformationRecord> aliased) {
        this(alias, aliased, null);
    }

    private JCattleBuyInformation(Name alias, Table<JCattleBuyInformationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JCattleBuyInformation(Table<O> child, ForeignKey<O, JCattleBuyInformationRecord> key) {
        super(child, key, CATTLE_BUY_INFORMATION);
    }

    @Override
    public Schema getSchema() {
        return JNaiveItFarm.NAIVE_IT_FARM;
    }

    @Override
    public UniqueKey<JCattleBuyInformationRecord> getPrimaryKey() {
        return Keys.KEY_CATTLE_BUY_INFORMATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<JCattleBuyInformationRecord>> getKeys() {
        return Arrays.<UniqueKey<JCattleBuyInformationRecord>>asList(Keys.KEY_CATTLE_BUY_INFORMATION_PRIMARY);
    }

    @Override
    public List<ForeignKey<JCattleBuyInformationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JCattleBuyInformationRecord, ?>>asList(Keys.FK10C3F92T20D0IDC02YDWEXMP9);
    }

    public JLocalBeefManagement localBeefManagement() {
        return new JLocalBeefManagement(this, Keys.FK10C3F92T20D0IDC02YDWEXMP9);
    }

    @Override
    public JCattleBuyInformation as(String alias) {
        return new JCattleBuyInformation(DSL.name(alias), this);
    }

    @Override
    public JCattleBuyInformation as(Name alias) {
        return new JCattleBuyInformation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCattleBuyInformation rename(String name) {
        return new JCattleBuyInformation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCattleBuyInformation rename(Name name) {
        return new JCattleBuyInformation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, LocalDate, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}

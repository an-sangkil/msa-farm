/*
 * This file is generated by jOOQ.
 */
package com.skan.farm.domain.tables;


import com.skan.farm.domain.JNaiveItFarm;
import com.skan.farm.domain.Keys;
import com.skan.farm.domain.tables.records.JDiaryRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JDiary extends TableImpl<JDiaryRecord> {

    private static final long serialVersionUID = -172252001;

    /**
     * The reference instance of <code>naive-it-farm.diary</code>
     */
    public static final JDiary DIARY = new JDiary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JDiaryRecord> getRecordType() {
        return JDiaryRecord.class;
    }

    /**
     * The column <code>naive-it-farm.diary.uuid</code>.
     */
    public final TableField<JDiaryRecord, String> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>naive-it-farm.diary.created_time</code>.
     */
    public final TableField<JDiaryRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>naive-it-farm.diary.max_temperature_type</code>.
     */
    public final TableField<JDiaryRecord, String> MAX_TEMPERATURE_TYPE = createField(DSL.name("max_temperature_type"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>naive-it-farm.diary.maximum_temperature</code>.
     */
    public final TableField<JDiaryRecord, Short> MAXIMUM_TEMPERATURE = createField(DSL.name("maximum_temperature"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>naive-it-farm.diary.min_temperature_type</code>.
     */
    public final TableField<JDiaryRecord, String> MIN_TEMPERATURE_TYPE = createField(DSL.name("min_temperature_type"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>naive-it-farm.diary.minimum_temperature</code>.
     */
    public final TableField<JDiaryRecord, Short> MINIMUM_TEMPERATURE = createField(DSL.name("minimum_temperature"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>naive-it-farm.diary.modified_time</code>.
     */
    public final TableField<JDiaryRecord, LocalDateTime> MODIFIED_TIME = createField(DSL.name("modified_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>naive-it-farm.diary.public_yn</code>.
     */
    public final TableField<JDiaryRecord, String> PUBLIC_YN = createField(DSL.name("public_yn"), org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>naive-it-farm.diary.seq</code>.
     */
    public final TableField<JDiaryRecord, Short> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>naive-it-farm.diary.standard_date</code>.
     */
    public final TableField<JDiaryRecord, LocalDate> STANDARD_DATE = createField(DSL.name("standard_date"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>naive-it-farm.diary.subject</code>.
     */
    public final TableField<JDiaryRecord, String> SUBJECT = createField(DSL.name("subject"), org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>naive-it-farm.diary.today_content</code>.
     */
    public final TableField<JDiaryRecord, String> TODAY_CONTENT = createField(DSL.name("today_content"), org.jooq.impl.SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>naive-it-farm.diary.today_weather_code</code>.
     */
    public final TableField<JDiaryRecord, String> TODAY_WEATHER_CODE = createField(DSL.name("today_weather_code"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>naive-it-farm.diary.tomorrow_todo</code>.
     */
    public final TableField<JDiaryRecord, String> TOMORROW_TODO = createField(DSL.name("tomorrow_todo"), org.jooq.impl.SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>naive-it-farm.diary.user_id</code>.
     */
    public final TableField<JDiaryRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * Create a <code>naive-it-farm.diary</code> table reference
     */
    public JDiary() {
        this(DSL.name("diary"), null);
    }

    /**
     * Create an aliased <code>naive-it-farm.diary</code> table reference
     */
    public JDiary(String alias) {
        this(DSL.name(alias), DIARY);
    }

    /**
     * Create an aliased <code>naive-it-farm.diary</code> table reference
     */
    public JDiary(Name alias) {
        this(alias, DIARY);
    }

    private JDiary(Name alias, Table<JDiaryRecord> aliased) {
        this(alias, aliased, null);
    }

    private JDiary(Name alias, Table<JDiaryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JDiary(Table<O> child, ForeignKey<O, JDiaryRecord> key) {
        super(child, key, DIARY);
    }

    @Override
    public Schema getSchema() {
        return JNaiveItFarm.NAIVE_IT_FARM;
    }

    @Override
    public UniqueKey<JDiaryRecord> getPrimaryKey() {
        return Keys.KEY_DIARY_PRIMARY;
    }

    @Override
    public List<UniqueKey<JDiaryRecord>> getKeys() {
        return Arrays.<UniqueKey<JDiaryRecord>>asList(Keys.KEY_DIARY_PRIMARY, Keys.KEY_DIARY_UK_91965AQPM84YUAHJJGBQYJX8A);
    }

    @Override
    public JDiary as(String alias) {
        return new JDiary(DSL.name(alias), this);
    }

    @Override
    public JDiary as(Name alias) {
        return new JDiary(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JDiary rename(String name) {
        return new JDiary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JDiary rename(Name name) {
        return new JDiary(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, LocalDateTime, String, Short, String, Short, LocalDateTime, String, Short, LocalDate, String, String, String, String, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}

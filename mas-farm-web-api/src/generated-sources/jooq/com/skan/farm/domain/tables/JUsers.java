/*
 * This file is generated by jOOQ.
 */
package com.skan.farm.domain.tables;


import com.skan.farm.domain.JNaiveItFarm;
import com.skan.farm.domain.Keys;
import com.skan.farm.domain.tables.records.JUsersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JUsers extends TableImpl<JUsersRecord> {

    private static final long serialVersionUID = 128022840;

    /**
     * The reference instance of <code>naive-it-farm.users</code>
     */
    public static final JUsers USERS = new JUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JUsersRecord> getRecordType() {
        return JUsersRecord.class;
    }

    /**
     * The column <code>naive-it-farm.users.uuid</code>. uuid

     */
    public final TableField<JUsersRecord, String> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "uuid\n");

    /**
     * The column <code>naive-it-farm.users.user_id</code>. 사용자 아이디
     */
    public final TableField<JUsersRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "사용자 아이디");

    /**
     * The column <code>naive-it-farm.users.password</code>. 패스워드
     */
    public final TableField<JUsersRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "패스워드");

    /**
     * The column <code>naive-it-farm.users.user_name</code>. 사용자이름
     */
    public final TableField<JUsersRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "사용자이름");

    /**
     * The column <code>naive-it-farm.users.email</code>. 이메일
     */
    public final TableField<JUsersRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "이메일");

    /**
     * The column <code>naive-it-farm.users.phone_number</code>. 전화번호
     */
    public final TableField<JUsersRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "전화번호");

    /**
     * The column <code>naive-it-farm.users.mobile_phone_number</code>. 휴대전화번호
     */
    public final TableField<JUsersRecord, String> MOBILE_PHONE_NUMBER = createField(DSL.name("mobile_phone_number"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "휴대전화번호");

    /**
     * The column <code>naive-it-farm.users.ssn_number</code>. 주민번호
     */
    public final TableField<JUsersRecord, String> SSN_NUMBER = createField(DSL.name("ssn_number"), org.jooq.impl.SQLDataType.VARCHAR(12), this, "주민번호");

    /**
     * The column <code>naive-it-farm.users.gender</code>. 성별(M : 남성F : 여성)
     */
    public final TableField<JUsersRecord, String> GENDER = createField(DSL.name("gender"), org.jooq.impl.SQLDataType.VARCHAR(1), this, "성별(M : 남성F : 여성)");

    /**
     * The column <code>naive-it-farm.users.last_login_time</code>. 마지막 접속 시간
     */
    public final TableField<JUsersRecord, LocalDateTime> LAST_LOGIN_TIME = createField(DSL.name("last_login_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "마지막 접속 시간");

    /**
     * The column <code>naive-it-farm.users.fail_login_time</code>. 마지막 접속 실패 시간
     */
    public final TableField<JUsersRecord, LocalDateTime> FAIL_LOGIN_TIME = createField(DSL.name("fail_login_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "마지막 접속 실패 시간");

    /**
     * The column <code>naive-it-farm.users.fail_login_count</code>. 로그인 실패 횟수
     */
    public final TableField<JUsersRecord, Long> FAIL_LOGIN_COUNT = createField(DSL.name("fail_login_count"), org.jooq.impl.SQLDataType.BIGINT, this, "로그인 실패 횟수");

    /**
     * The column <code>naive-it-farm.users.use_lock_state</code>. 잠금여부 (Y : 잠김)
     */
    public final TableField<JUsersRecord, String> USE_LOCK_STATE = createField(DSL.name("use_lock_state"), org.jooq.impl.SQLDataType.VARCHAR(1).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.VARCHAR)), this, "잠금여부 (Y : 잠김)");

    /**
     * The column <code>naive-it-farm.users.description</code>. 비고
     */
    public final TableField<JUsersRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "비고");

    /**
     * Create a <code>naive-it-farm.users</code> table reference
     */
    public JUsers() {
        this(DSL.name("users"), null);
    }

    /**
     * Create an aliased <code>naive-it-farm.users</code> table reference
     */
    public JUsers(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>naive-it-farm.users</code> table reference
     */
    public JUsers(Name alias) {
        this(alias, USERS);
    }

    private JUsers(Name alias, Table<JUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private JUsers(Name alias, Table<JUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JUsers(Table<O> child, ForeignKey<O, JUsersRecord> key) {
        super(child, key, USERS);
    }

    @Override
    public Schema getSchema() {
        return JNaiveItFarm.NAIVE_IT_FARM;
    }

    @Override
    public UniqueKey<JUsersRecord> getPrimaryKey() {
        return Keys.KEY_USERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<JUsersRecord>> getKeys() {
        return Arrays.<UniqueKey<JUsersRecord>>asList(Keys.KEY_USERS_PRIMARY, Keys.KEY_USERS_USER_ID);
    }

    @Override
    public JUsers as(String alias) {
        return new JUsers(DSL.name(alias), this);
    }

    @Override
    public JUsers as(Name alias) {
        return new JUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JUsers rename(String name) {
        return new JUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUsers rename(Name name) {
        return new JUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<String, String, String, String, String, String, String, String, String, LocalDateTime, LocalDateTime, Long, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}

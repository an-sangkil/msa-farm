/*
 * This file is generated by jOOQ.
 */
package com.skan.farm.domain.tables;


import com.skan.farm.domain.JNaiveItFarm;
import com.skan.farm.domain.Keys;
import com.skan.farm.domain.tables.records.JGroupMemberRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JGroupMember extends TableImpl<JGroupMemberRecord> {

    private static final long serialVersionUID = 1357374594;

    /**
     * The reference instance of <code>naive-it-farm.group_member</code>
     */
    public static final JGroupMember GROUP_MEMBER = new JGroupMember();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JGroupMemberRecord> getRecordType() {
        return JGroupMemberRecord.class;
    }

    /**
     * The column <code>naive-it-farm.group_member.group_no</code>. 그룹번호
     */
    public final TableField<JGroupMemberRecord, Integer> GROUP_NO = createField(DSL.name("group_no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "그룹번호");

    /**
     * The column <code>naive-it-farm.group_member.user_id</code>. 사용자 아이디
     */
    public final TableField<JGroupMemberRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "사용자 아이디");

    /**
     * Create a <code>naive-it-farm.group_member</code> table reference
     */
    public JGroupMember() {
        this(DSL.name("group_member"), null);
    }

    /**
     * Create an aliased <code>naive-it-farm.group_member</code> table reference
     */
    public JGroupMember(String alias) {
        this(DSL.name(alias), GROUP_MEMBER);
    }

    /**
     * Create an aliased <code>naive-it-farm.group_member</code> table reference
     */
    public JGroupMember(Name alias) {
        this(alias, GROUP_MEMBER);
    }

    private JGroupMember(Name alias, Table<JGroupMemberRecord> aliased) {
        this(alias, aliased, null);
    }

    private JGroupMember(Name alias, Table<JGroupMemberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JGroupMember(Table<O> child, ForeignKey<O, JGroupMemberRecord> key) {
        super(child, key, GROUP_MEMBER);
    }

    @Override
    public Schema getSchema() {
        return JNaiveItFarm.NAIVE_IT_FARM;
    }

    @Override
    public UniqueKey<JGroupMemberRecord> getPrimaryKey() {
        return Keys.KEY_GROUP_MEMBER_PRIMARY;
    }

    @Override
    public List<UniqueKey<JGroupMemberRecord>> getKeys() {
        return Arrays.<UniqueKey<JGroupMemberRecord>>asList(Keys.KEY_GROUP_MEMBER_PRIMARY, Keys.KEY_GROUP_MEMBER_USER_ID);
    }

    @Override
    public List<ForeignKey<JGroupMemberRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JGroupMemberRecord, ?>>asList(Keys.GROUP_MEMBER_IBFK_1);
    }

    public JGroupManagement groupManagement() {
        return new JGroupManagement(this, Keys.GROUP_MEMBER_IBFK_1);
    }

    @Override
    public JGroupMember as(String alias) {
        return new JGroupMember(DSL.name(alias), this);
    }

    @Override
    public JGroupMember as(Name alias) {
        return new JGroupMember(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JGroupMember rename(String name) {
        return new JGroupMember(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JGroupMember rename(Name name) {
        return new JGroupMember(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}

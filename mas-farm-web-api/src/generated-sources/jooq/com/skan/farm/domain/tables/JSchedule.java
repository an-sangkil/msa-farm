/*
 * This file is generated by jOOQ.
 */
package com.skan.farm.domain.tables;


import com.skan.farm.domain.Indexes;
import com.skan.farm.domain.JNaiveItFarm;
import com.skan.farm.domain.Keys;
import com.skan.farm.domain.tables.records.JScheduleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JSchedule extends TableImpl<JScheduleRecord> {

    private static final long serialVersionUID = -395768403;

    /**
     * The reference instance of <code>naive-it-farm.schedule</code>
     */
    public static final JSchedule SCHEDULE = new JSchedule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JScheduleRecord> getRecordType() {
        return JScheduleRecord.class;
    }

    /**
     * The column <code>naive-it-farm.schedule.sch_mgt_no</code>. 일정관리번호
     */
    public final TableField<JScheduleRecord, Long> SCH_MGT_NO = createField(DSL.name("sch_mgt_no"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "일정관리번호");

    /**
     * The column <code>naive-it-farm.schedule.sch_seq</code>. 같은날의 순번
     */
    public final TableField<JScheduleRecord, Long> SCH_SEQ = createField(DSL.name("sch_seq"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "같은날의 순번");

    /**
     * The column <code>naive-it-farm.schedule.sch_subject</code>. 제목
     */
    public final TableField<JScheduleRecord, String> SCH_SUBJECT = createField(DSL.name("sch_subject"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "제목");

    /**
     * The column <code>naive-it-farm.schedule.sch_content</code>.
     */
    public final TableField<JScheduleRecord, String> SCH_CONTENT = createField(DSL.name("sch_content"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>naive-it-farm.schedule.std_date</code>. 기준날짜

     */
    public final TableField<JScheduleRecord, String> STD_DATE = createField(DSL.name("std_date"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "기준날짜\n");

    /**
     * The column <code>naive-it-farm.schedule.today_weather_code</code>. 오늘 날씨 ('맑음......')
     */
    public final TableField<JScheduleRecord, String> TODAY_WEATHER_CODE = createField(DSL.name("today_weather_code"), org.jooq.impl.SQLDataType.VARCHAR(12), this, "오늘 날씨 ('맑음......')");

    /**
     * The column <code>naive-it-farm.schedule.min_degreespoint_code</code>.
     */
    public final TableField<JScheduleRecord, String> MIN_DEGREESPOINT_CODE = createField(DSL.name("min_degreespoint_code"), org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>naive-it-farm.schedule.max_degreespoint_code</code>.
     */
    public final TableField<JScheduleRecord, String> MAX_DEGREESPOINT_CODE = createField(DSL.name("max_degreespoint_code"), org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>naive-it-farm.schedule.min_temperature</code>. 최저 기온

     */
    public final TableField<JScheduleRecord, Long> MIN_TEMPERATURE = createField(DSL.name("min_temperature"), org.jooq.impl.SQLDataType.BIGINT, this, "최저 기온\n");

    /**
     * The column <code>naive-it-farm.schedule.max_temperature</code>. 최고온도
     */
    public final TableField<JScheduleRecord, Long> MAX_TEMPERATURE = createField(DSL.name("max_temperature"), org.jooq.impl.SQLDataType.BIGINT, this, "최고온도");

    /**
     * The column <code>naive-it-farm.schedule.create_time</code>. 생성시간
     */
    public final TableField<JScheduleRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "생성시간");

    /**
     * The column <code>naive-it-farm.schedule.modify_time</code>. 수정시간
     */
    public final TableField<JScheduleRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "수정시간");

    /**
     * The column <code>naive-it-farm.schedule.public_yn</code>. 공개 여부 'Y' : 공개  'N' 비공개
     */
    public final TableField<JScheduleRecord, String> PUBLIC_YN = createField(DSL.name("public_yn"), org.jooq.impl.SQLDataType.VARCHAR(1).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.VARCHAR)), this, "공개 여부 'Y' : 공개  'N' 비공개");

    /**
     * The column <code>naive-it-farm.schedule.group_no</code>. 그룹번호
     */
    public final TableField<JScheduleRecord, Integer> GROUP_NO = createField(DSL.name("group_no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "그룹번호");

    /**
     * The column <code>naive-it-farm.schedule.user_id</code>. 사용자 아이디
     */
    public final TableField<JScheduleRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "사용자 아이디");

    /**
     * Create a <code>naive-it-farm.schedule</code> table reference
     */
    public JSchedule() {
        this(DSL.name("schedule"), null);
    }

    /**
     * Create an aliased <code>naive-it-farm.schedule</code> table reference
     */
    public JSchedule(String alias) {
        this(DSL.name(alias), SCHEDULE);
    }

    /**
     * Create an aliased <code>naive-it-farm.schedule</code> table reference
     */
    public JSchedule(Name alias) {
        this(alias, SCHEDULE);
    }

    private JSchedule(Name alias, Table<JScheduleRecord> aliased) {
        this(alias, aliased, null);
    }

    private JSchedule(Name alias, Table<JScheduleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JSchedule(Table<O> child, ForeignKey<O, JScheduleRecord> key) {
        super(child, key, SCHEDULE);
    }

    @Override
    public Schema getSchema() {
        return JNaiveItFarm.NAIVE_IT_FARM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SCHEDULE_GROUP_NO);
    }

    @Override
    public UniqueKey<JScheduleRecord> getPrimaryKey() {
        return Keys.KEY_SCHEDULE_PRIMARY;
    }

    @Override
    public List<UniqueKey<JScheduleRecord>> getKeys() {
        return Arrays.<UniqueKey<JScheduleRecord>>asList(Keys.KEY_SCHEDULE_PRIMARY, Keys.KEY_SCHEDULE_USER_ID);
    }

    @Override
    public List<ForeignKey<JScheduleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JScheduleRecord, ?>>asList(Keys.SCHEDULE_IBFK_1);
    }

    public JGroupMember groupMember() {
        return new JGroupMember(this, Keys.SCHEDULE_IBFK_1);
    }

    @Override
    public JSchedule as(String alias) {
        return new JSchedule(DSL.name(alias), this);
    }

    @Override
    public JSchedule as(Name alias) {
        return new JSchedule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JSchedule rename(String name) {
        return new JSchedule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JSchedule rename(Name name) {
        return new JSchedule(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, Long, String, String, String, String, String, String, Long, Long, LocalDateTime, LocalDateTime, String, Integer, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.skan.farm.domain.tables;


import com.skan.farm.domain.JNaiveItFarm;
import com.skan.farm.domain.Keys;
import com.skan.farm.domain.tables.records.JScheduleRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JSchedule extends TableImpl<JScheduleRecord> {

    private static final long serialVersionUID = 297121122;

    /**
     * The reference instance of <code>naive-it-farm.schedule</code>
     */
    public static final JSchedule SCHEDULE = new JSchedule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JScheduleRecord> getRecordType() {
        return JScheduleRecord.class;
    }

    /**
     * The column <code>naive-it-farm.schedule.uuid</code>.
     */
    public final TableField<JScheduleRecord, String> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>naive-it-farm.schedule.content</code>.
     */
    public final TableField<JScheduleRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>naive-it-farm.schedule.create_time</code>.
     */
    public final TableField<JScheduleRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>naive-it-farm.schedule.maximum_temperature</code>.
     */
    public final TableField<JScheduleRecord, Short> MAXIMUM_TEMPERATURE = createField(DSL.name("maximum_temperature"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>naive-it-farm.schedule.minimum_temperature</code>.
     */
    public final TableField<JScheduleRecord, Short> MINIMUM_TEMPERATURE = createField(DSL.name("minimum_temperature"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>naive-it-farm.schedule.modified_time</code>.
     */
    public final TableField<JScheduleRecord, LocalDateTime> MODIFIED_TIME = createField(DSL.name("modified_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>naive-it-farm.schedule.public_yn</code>.
     */
    public final TableField<JScheduleRecord, String> PUBLIC_YN = createField(DSL.name("public_yn"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>naive-it-farm.schedule.seq</code>.
     */
    public final TableField<JScheduleRecord, Short> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>naive-it-farm.schedule.standard_date</code>.
     */
    public final TableField<JScheduleRecord, LocalDate> STANDARD_DATE = createField(DSL.name("standard_date"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>naive-it-farm.schedule.subject</code>.
     */
    public final TableField<JScheduleRecord, String> SUBJECT = createField(DSL.name("subject"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>naive-it-farm.schedule.today_weather_code</code>.
     */
    public final TableField<JScheduleRecord, String> TODAY_WEATHER_CODE = createField(DSL.name("today_weather_code"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>naive-it-farm.schedule</code> table reference
     */
    public JSchedule() {
        this(DSL.name("schedule"), null);
    }

    /**
     * Create an aliased <code>naive-it-farm.schedule</code> table reference
     */
    public JSchedule(String alias) {
        this(DSL.name(alias), SCHEDULE);
    }

    /**
     * Create an aliased <code>naive-it-farm.schedule</code> table reference
     */
    public JSchedule(Name alias) {
        this(alias, SCHEDULE);
    }

    private JSchedule(Name alias, Table<JScheduleRecord> aliased) {
        this(alias, aliased, null);
    }

    private JSchedule(Name alias, Table<JScheduleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JSchedule(Table<O> child, ForeignKey<O, JScheduleRecord> key) {
        super(child, key, SCHEDULE);
    }

    @Override
    public Schema getSchema() {
        return JNaiveItFarm.NAIVE_IT_FARM;
    }

    @Override
    public UniqueKey<JScheduleRecord> getPrimaryKey() {
        return Keys.KEY_SCHEDULE_PRIMARY;
    }

    @Override
    public List<UniqueKey<JScheduleRecord>> getKeys() {
        return Arrays.<UniqueKey<JScheduleRecord>>asList(Keys.KEY_SCHEDULE_PRIMARY);
    }

    @Override
    public JSchedule as(String alias) {
        return new JSchedule(DSL.name(alias), this);
    }

    @Override
    public JSchedule as(Name alias) {
        return new JSchedule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JSchedule rename(String name) {
        return new JSchedule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JSchedule rename(Name name) {
        return new JSchedule(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, LocalDateTime, Short, Short, LocalDateTime, String, Short, LocalDate, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}

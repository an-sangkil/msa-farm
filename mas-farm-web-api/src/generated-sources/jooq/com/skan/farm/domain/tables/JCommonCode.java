/*
 * This file is generated by jOOQ.
 */
package com.skan.farm.domain.tables;


import com.skan.farm.domain.Indexes;
import com.skan.farm.domain.JNaiveItFarm;
import com.skan.farm.domain.Keys;
import com.skan.farm.domain.tables.records.JCommonCodeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCommonCode extends TableImpl<JCommonCodeRecord> {

    private static final long serialVersionUID = 1133184170;

    /**
     * The reference instance of <code>naive-it-farm.common_code</code>
     */
    public static final JCommonCode COMMON_CODE = new JCommonCode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JCommonCodeRecord> getRecordType() {
        return JCommonCodeRecord.class;
    }

    /**
     * The column <code>naive-it-farm.common_code.code</code>. 코드
     */
    public final TableField<JCommonCodeRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "코드");

    /**
     * The column <code>naive-it-farm.common_code.upper_code</code>. 상위코드
     */
    public final TableField<JCommonCodeRecord, String> UPPER_CODE = createField(DSL.name("upper_code"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "상위코드");

    /**
     * The column <code>naive-it-farm.common_code.code_seq</code>. 그룹별 코드 순번
     */
    public final TableField<JCommonCodeRecord, Long> CODE_SEQ = createField(DSL.name("code_seq"), org.jooq.impl.SQLDataType.BIGINT, this, "그룹별 코드 순번");

    /**
     * The column <code>naive-it-farm.common_code.code_name</code>. 코드이름
     */
    public final TableField<JCommonCodeRecord, String> CODE_NAME = createField(DSL.name("code_name"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "코드이름");

    /**
     * The column <code>naive-it-farm.common_code.code_comment</code>. 코드 설명
     */
    public final TableField<JCommonCodeRecord, String> CODE_COMMENT = createField(DSL.name("code_comment"), org.jooq.impl.SQLDataType.VARCHAR(2048), this, "코드 설명");

    /**
     * The column <code>naive-it-farm.common_code.created_time</code>. 생성일시
     */
    public final TableField<JCommonCodeRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "생성일시");

    /**
     * Create a <code>naive-it-farm.common_code</code> table reference
     */
    public JCommonCode() {
        this(DSL.name("common_code"), null);
    }

    /**
     * Create an aliased <code>naive-it-farm.common_code</code> table reference
     */
    public JCommonCode(String alias) {
        this(DSL.name(alias), COMMON_CODE);
    }

    /**
     * Create an aliased <code>naive-it-farm.common_code</code> table reference
     */
    public JCommonCode(Name alias) {
        this(alias, COMMON_CODE);
    }

    private JCommonCode(Name alias, Table<JCommonCodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private JCommonCode(Name alias, Table<JCommonCodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JCommonCode(Table<O> child, ForeignKey<O, JCommonCodeRecord> key) {
        super(child, key, COMMON_CODE);
    }

    @Override
    public Schema getSchema() {
        return JNaiveItFarm.NAIVE_IT_FARM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMMON_CODE_UPPER_CODE);
    }

    @Override
    public UniqueKey<JCommonCodeRecord> getPrimaryKey() {
        return Keys.KEY_COMMON_CODE_PRIMARY;
    }

    @Override
    public List<UniqueKey<JCommonCodeRecord>> getKeys() {
        return Arrays.<UniqueKey<JCommonCodeRecord>>asList(Keys.KEY_COMMON_CODE_PRIMARY);
    }

    @Override
    public List<ForeignKey<JCommonCodeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JCommonCodeRecord, ?>>asList(Keys.COMMON_CODE_IBFK_1);
    }

    public JCommonCode commonCode() {
        return new JCommonCode(this, Keys.COMMON_CODE_IBFK_1);
    }

    @Override
    public JCommonCode as(String alias) {
        return new JCommonCode(DSL.name(alias), this);
    }

    @Override
    public JCommonCode as(Name alias) {
        return new JCommonCode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCommonCode rename(String name) {
        return new JCommonCode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCommonCode rename(Name name) {
        return new JCommonCode(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, Long, String, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}

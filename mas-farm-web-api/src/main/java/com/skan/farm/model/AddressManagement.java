package com.skan.farm.model;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

/**
 * 주소록 관리 모델 클래스.
 * 
 * @author generated by ERMaster
 * @version $Id$
 */
public class AddressManagement implements Serializable {

	/** serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** 사용자 아이디. */
	private String userId;

	/** 관리 번호. */
	private Long managementNumber;

	/** 주소록 사용자 이름. */
	private String userName;

	/** 메모. */
	private String memo;

	/** 주소 상세 목록. */
	private Set<AddressDetail> addressDetailSet;

	/** 기념일 목록. */
	private Set<Anniversary> anniversarySet;

	/** 이메일 정보 목록. */
	private Set<Email> emailSet;

	/** 주소록 전화번호부 목록. */
	private Set<Phone> phoneSet;

	/**
	 * 생성자.
	 */
	public AddressManagement() {
		this.addressDetailSet = new HashSet<AddressDetail>();
		this.anniversarySet = new HashSet<Anniversary>();
		this.emailSet = new HashSet<Email>();
		this.phoneSet = new HashSet<Phone>();
	}

	/**
	 * 사용자 아이디을 설정합니다..
	 * 
	 * @param userId
	 *            사용자 아이디
	 */
	public void setUserId(String userId) {
		this.userId = userId;
	}

	/**
	 * 사용자 아이디을 가져옵니다..
	 * 
	 * @return 사용자 아이디
	 */
	public String getUserId() {
		return this.userId;
	}

	/**
	 * 관리 번호을 설정합니다..
	 * 
	 * @param managementNumber
	 *            관리 번호
	 */
	public void setManagementNumber(Long managementNumber) {
		this.managementNumber = managementNumber;
	}

	/**
	 * 관리 번호을 가져옵니다..
	 * 
	 * @return 관리 번호
	 */
	public Long getManagementNumber() {
		return this.managementNumber;
	}

	/**
	 * 주소록 사용자 이름을 설정합니다..
	 * 
	 * @param userName
	 *            주소록 사용자 이름
	 */
	public void setUserName(String userName) {
		this.userName = userName;
	}

	/**
	 * 주소록 사용자 이름을 가져옵니다..
	 * 
	 * @return 주소록 사용자 이름
	 */
	public String getUserName() {
		return this.userName;
	}

	/**
	 * 메모을 설정합니다..
	 * 
	 * @param memo
	 *            메모
	 */
	public void setMemo(String memo) {
		this.memo = memo;
	}

	/**
	 * 메모을 가져옵니다..
	 * 
	 * @return 메모
	 */
	public String getMemo() {
		return this.memo;
	}

	/**
	 * 주소 상세 목록을 설정합니다..
	 * 
	 * @param addressDetailSet
	 *            주소 상세 목록
	 */
	public void setAddressDetailSet(Set<AddressDetail> addressDetailSet) {
		this.addressDetailSet = addressDetailSet;
	}

	/**
	 * 주소 상세를 추가합니다..
	 * 
	 * @param addressDetail
	 *            주소 상세
	 */
	public void addAddressDetail(AddressDetail addressDetail) {
		this.addressDetailSet.add(addressDetail);
	}

	/**
	 * 주소 상세 목록을 가져옵니다..
	 * 
	 * @return 주소 상세 목록
	 */
	public Set<AddressDetail> getAddressDetailSet() {
		return this.addressDetailSet;
	}

	/**
	 * 기념일 목록을 설정합니다..
	 * 
	 * @param anniversarySet
	 *            기념일 목록
	 */
	public void setAnniversarySet(Set<Anniversary> anniversarySet) {
		this.anniversarySet = anniversarySet;
	}

	/**
	 * 기념일를 추가합니다..
	 * 
	 * @param anniversary
	 *            기념일
	 */
	public void addAnniversary(Anniversary anniversary) {
		this.anniversarySet.add(anniversary);
	}

	/**
	 * 기념일 목록을 가져옵니다..
	 * 
	 * @return 기념일 목록
	 */
	public Set<Anniversary> getAnniversarySet() {
		return this.anniversarySet;
	}

	/**
	 * 이메일 정보 목록을 설정합니다..
	 * 
	 * @param emailSet
	 *            이메일 정보 목록
	 */
	public void setEmailSet(Set<Email> emailSet) {
		this.emailSet = emailSet;
	}

	/**
	 * 이메일 정보를 추가합니다..
	 * 
	 * @param email
	 *            이메일 정보
	 */
	public void addEmail(Email email) {
		this.emailSet.add(email);
	}

	/**
	 * 이메일 정보 목록을 가져옵니다..
	 * 
	 * @return 이메일 정보 목록
	 */
	public Set<Email> getEmailSet() {
		return this.emailSet;
	}

	/**
	 * 주소록 전화번호부 목록을 설정합니다..
	 * 
	 * @param phoneSet
	 *            주소록 전화번호부 목록
	 */
	public void setPhoneSet(Set<Phone> phoneSet) {
		this.phoneSet = phoneSet;
	}

	/**
	 * 주소록 전화번호부를 추가합니다..
	 * 
	 * @param phone
	 *            주소록 전화번호부
	 */
	public void addPhone(Phone phone) {
		this.phoneSet.add(phone);
	}

	/**
	 * 주소록 전화번호부 목록을 가져옵니다..
	 * 
	 * @return 주소록 전화번호부 목록
	 */
	public Set<Phone> getPhoneSet() {
		return this.phoneSet;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((userId == null) ? 0 : userId.hashCode());
		result = prime * result + ((managementNumber == null) ? 0 : managementNumber.hashCode());
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		AddressManagement other = (AddressManagement) obj;
		if (userId == null) {
			if (other.userId != null) {
				return false;
			}
		} else if (!userId.equals(other.userId)) {
			return false;
		}
		if (managementNumber == null) {
			if (other.managementNumber != null) {
				return false;
			}
		} else if (!managementNumber.equals(other.managementNumber)) {
			return false;
		}
		return true;
	}

}

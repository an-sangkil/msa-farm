package com.skan.farm.domain.entity;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.format.annotation.DateTimeFormat;

import javax.persistence.*;
import java.io.Serializable;
import java.time.LocalDate;
import java.time.LocalDateTime;

/**
 * 일정관리 테이블 모델 클래스.
 *
 * @author generated by ERMaster
 * @version $Id$
 */
@Entity
@Getter
@Setter
@ToString
@EqualsAndHashCode
@NoArgsConstructor(access = AccessLevel.PROTECTED)
public class Diary implements Serializable {

    @Builder
    public Diary(String uuid, Short seq, LocalDate standardDate, String subject, String today_content, String tomorrow_todo, String todayWeatherCode, String minTemperatureType, Short minimumTemperature, String maxTemperatureType, Short maximumTemperature, LocalDateTime createdTime, LocalDateTime modifiedTime, String publicYn, String userId) {
        this.uuid = uuid;
        this.seq = seq;
        this.standardDate = standardDate;
        this.subject = subject;
        this.today_content = today_content;
        this.tomorrow_todo = tomorrow_todo;
        this.todayWeatherCode = todayWeatherCode;
        this.minTemperatureType = minTemperatureType;
        this.minimumTemperature = minimumTemperature;
        this.maxTemperatureType = maxTemperatureType;
        this.maximumTemperature = maximumTemperature;
        this.createdTime = createdTime;
        this.modifiedTime = modifiedTime;
        this.publicYn = publicYn;
        this.userId = userId;
    }


    /**
     * uuid.
     */
    @Id
    @Column(length = 128)
    private String uuid;

    /**
     * 같은날의 순번.
     */
    private Short seq;

    /**
     * 기준날짜.
     */
    @JsonDeserialize(using = LocalDateDeserializer.class)
    @JsonSerialize(using = LocalDateSerializer.class)
    @DateTimeFormat(pattern = "yyyy-MM-dd")
    @JsonFormat(pattern = "yyyy-MM-dd")
    private LocalDate standardDate;


    /**
     * 제목.
     */
    @Column(length = 512)
    private String subject;

    /**
     *  오늘 한일 내용.
     */
    @Column(length = 2048)
    private String today_content;


    /**
     *  오늘 내일 할일 .
     */
    @Column(length = 2048)
    private String tomorrow_todo ;


    /**
     * 오늘 날씨.
     */
    @Column(length = 16)
    private String todayWeatherCode;

    /**
     * 최저 온도 타입 (영상/영하)
     */
    @Column(length = 16)
    private String minTemperatureType;

    /**
     * 최저 기온.
     */
    @Column(length = 16)
    private Short minimumTemperature;

    /**
     * 최고 온도 타입 (영상/영하)
     */

    @Column(length = 16)
    private String maxTemperatureType;

    /**
     * 최고온도.
     */
    @Column(length = 16)
    private Short maximumTemperature;

    /**
     * 생성시간.
     */
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @CreationTimestamp
    @Column(updatable = false)
    private LocalDateTime createdTime;

    /**
     * 수정시간.
     */
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @UpdateTimestamp
    private LocalDateTime modifiedTime;

    /**
     * 공개 여부.
     */
    @Column(length = 1)
    private String publicYn;

    /**
     * 그룹관리.
     */
    @Transient
    private GroupManagement groupManagement;

    /**
     * 그룹멤버.
     */
    @Transient
    private GroupMember groupMember;

    /**
     * 사용자 아이디.
     */
    @Column(unique = true,length = 32)
    private String userId;


}
